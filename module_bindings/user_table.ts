// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, IDatabaseTable, AlgebraicValue, ReducerEvent, Identity } from "@clockworklabs/spacetimedb-sdk";

export class UserTable extends IDatabaseTable
{
	public static tableName = "UserTable";
	public identity: Identity;
	public username: string | null;
	public online: boolean;
	public timeLogin: number;
	public timeLogout: number | null;
	public timeRegister: number;

	public static primaryKey: string | undefined = "identity";

	constructor(identity: Identity, username: string | null, online: boolean, timeLogin: number, timeLogout: number | null, timeRegister: number) {
	super();
		this.identity = identity;
		this.username = username;
		this.online = online;
		this.timeLogin = timeLogin;
		this.timeLogout = timeLogout;
		this.timeRegister = timeRegister;
	}

	public static serialize(value: UserTable): object {
		return [
		Array.from(value.identity.toUint8Array()), value.username ? { "some": value.username } : { "none": [] }, value.online, value.timeLogin, value.timeLogout ? { "some": value.timeLogout } : { "none": [] }, value.timeRegister
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("identity", AlgebraicType.createProductType([
			new ProductTypeElement("__identity_bytes", AlgebraicType.createArrayType(AlgebraicType.createPrimitiveType(BuiltinType.Type.U8))),
		])),
			new ProductTypeElement("username", AlgebraicType.createSumType([
			new SumTypeVariant("some", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
			new SumTypeVariant("none", AlgebraicType.createProductType([
		])),
		])),
			new ProductTypeElement("online", AlgebraicType.createPrimitiveType(BuiltinType.Type.Bool)),
			new ProductTypeElement("time_login", AlgebraicType.createPrimitiveType(BuiltinType.Type.U64)),
			new ProductTypeElement("time_logout", AlgebraicType.createSumType([
			new SumTypeVariant("some", AlgebraicType.createPrimitiveType(BuiltinType.Type.U64)),
			new SumTypeVariant("none", AlgebraicType.createProductType([
		])),
		])),
			new ProductTypeElement("time_register", AlgebraicType.createPrimitiveType(BuiltinType.Type.U64)),
		]);
	}

	public static fromValue(value: AlgebraicValue): UserTable
	{
		let productValue = value.asProductValue();
		let __identity = new Identity(productValue.elements[0].asProductValue().elements[0].asBytes());
		let __username = productValue.elements[1].asSumValue().tag == 1 ? null : productValue.elements[1].asSumValue().value.asString();
		let __online = productValue.elements[2].asBoolean();
		let __time_login = productValue.elements[3].asNumber();
		let __time_logout = productValue.elements[4].asSumValue().tag == 1 ? null : productValue.elements[4].asSumValue().value.asNumber();
		let __time_register = productValue.elements[5].asNumber();
		return new this(__identity, __username, __online, __time_login, __time_logout, __time_register);
	}

	public static count(): number
	{
		return __SPACETIMEDB__.clientDB.getTable("UserTable").count();
	}

	public static all(): UserTable[]
	{
		return __SPACETIMEDB__.clientDB.getTable("UserTable").getInstances() as unknown as UserTable[];
	}

	public static filterByIdentity(value: Identity): UserTable | null
	{
		for(let instance of __SPACETIMEDB__.clientDB.getTable("UserTable").getInstances())
		{
			if (instance.identity.isEqual(value)) {
				return instance;
			}
		}
		return null;
	}

	public static filterByOnline(value: boolean): UserTable[]
	{
		let result: UserTable[] = [];
		for(let instance of __SPACETIMEDB__.clientDB.getTable("UserTable").getInstances())
		{
			if (instance.online === value) {
				result.push(instance);
			}
		}
		return result;
	}

	public static filterByTimeLogin(value: number): UserTable[]
	{
		let result: UserTable[] = [];
		for(let instance of __SPACETIMEDB__.clientDB.getTable("UserTable").getInstances())
		{
			if (instance.timeLogin === value) {
				result.push(instance);
			}
		}
		return result;
	}

	public static filterByTimeRegister(value: number): UserTable[]
	{
		let result: UserTable[] = [];
		for(let instance of __SPACETIMEDB__.clientDB.getTable("UserTable").getInstances())
		{
			if (instance.timeRegister === value) {
				result.push(instance);
			}
		}
		return result;
	}


	public static onInsert(callback: (value: UserTable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("UserTable").onInsert(callback);
	}

	public static onUpdate(callback: (oldValue: UserTable, newValue: UserTable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("UserTable").onUpdate(callback);
	}

	public static onDelete(callback: (value: UserTable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("UserTable").onDelete(callback);
	}

	public static removeOnInsert(callback: (value: UserTable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("UserTable").removeOnInsert(callback);
	}

	public static removeOnUpdate(callback: (oldValue: UserTable, newValue: UserTable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("UserTable").removeOnUpdate(callback);
	}

	public static removeOnDelete(callback: (value: UserTable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("UserTable").removeOnDelete(callback);
	}

}

export default UserTable;

__SPACETIMEDB__.registerComponent("UserTable", UserTable);
