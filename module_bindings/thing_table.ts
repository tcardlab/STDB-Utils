// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

// @ts-ignore
import { __SPACETIMEDB__, AlgebraicType, ProductType, BuiltinType, ProductTypeElement, SumType, SumTypeVariant, IDatabaseTable, AlgebraicValue, ReducerEvent, Identity } from "@clockworklabs/spacetimedb-sdk";

export class ThingTable extends IDatabaseTable
{
	public static tableName = "ThingTable";
	public thingId: number;
	public owner: Identity;
	public content: string | null;
	public status: boolean;
	public time: number;

	public static primaryKey: string | undefined = "thingId";

	constructor(thingId: number, owner: Identity, content: string | null, status: boolean, time: number) {
	super();
		this.thingId = thingId;
		this.owner = owner;
		this.content = content;
		this.status = status;
		this.time = time;
	}

	public static serialize(value: ThingTable): object {
		return [
		value.thingId, Array.from(value.owner.toUint8Array()), value.content ? { "some": value.content } : { "none": [] }, value.status, value.time
		];
	}

	public static getAlgebraicType(): AlgebraicType
	{
		return AlgebraicType.createProductType([
			new ProductTypeElement("thing_id", AlgebraicType.createPrimitiveType(BuiltinType.Type.U64)),
			new ProductTypeElement("owner", AlgebraicType.createProductType([
			new ProductTypeElement("__identity_bytes", AlgebraicType.createArrayType(AlgebraicType.createPrimitiveType(BuiltinType.Type.U8))),
		])),
			new ProductTypeElement("content", AlgebraicType.createSumType([
			new SumTypeVariant("some", AlgebraicType.createPrimitiveType(BuiltinType.Type.String)),
			new SumTypeVariant("none", AlgebraicType.createProductType([
		])),
		])),
			new ProductTypeElement("status", AlgebraicType.createPrimitiveType(BuiltinType.Type.Bool)),
			new ProductTypeElement("time", AlgebraicType.createPrimitiveType(BuiltinType.Type.U64)),
		]);
	}

	public static fromValue(value: AlgebraicValue): ThingTable
	{
		let productValue = value.asProductValue();
		let __thing_id = productValue.elements[0].asNumber();
		let __owner = new Identity(productValue.elements[1].asProductValue().elements[0].asBytes());
		let __content = productValue.elements[2].asSumValue().tag == 1 ? null : productValue.elements[2].asSumValue().value.asString();
		let __status = productValue.elements[3].asBoolean();
		let __time = productValue.elements[4].asNumber();
		return new this(__thing_id, __owner, __content, __status, __time);
	}

	public static count(): number
	{
		return __SPACETIMEDB__.clientDB.getTable("ThingTable").count();
	}

	public static all(): ThingTable[]
	{
		return __SPACETIMEDB__.clientDB.getTable("ThingTable").getInstances() as unknown as ThingTable[];
	}

	public static filterByThingId(value: number): ThingTable | null
	{
		for(let instance of __SPACETIMEDB__.clientDB.getTable("ThingTable").getInstances())
		{
			if (instance.thingId === value) {
				return instance;
			}
		}
		return null;
	}

	public static filterByOwner(value: Identity): ThingTable[]
	{
		let result: ThingTable[] = [];
		for(let instance of __SPACETIMEDB__.clientDB.getTable("ThingTable").getInstances())
		{
			if (instance.owner.isEqual(value)) {
				result.push(instance);
			}
		}
		return result;
	}

	public static filterByStatus(value: boolean): ThingTable[]
	{
		let result: ThingTable[] = [];
		for(let instance of __SPACETIMEDB__.clientDB.getTable("ThingTable").getInstances())
		{
			if (instance.status === value) {
				result.push(instance);
			}
		}
		return result;
	}

	public static filterByTime(value: number): ThingTable[]
	{
		let result: ThingTable[] = [];
		for(let instance of __SPACETIMEDB__.clientDB.getTable("ThingTable").getInstances())
		{
			if (instance.time === value) {
				result.push(instance);
			}
		}
		return result;
	}


	public static onInsert(callback: (value: ThingTable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("ThingTable").onInsert(callback);
	}

	public static onUpdate(callback: (oldValue: ThingTable, newValue: ThingTable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("ThingTable").onUpdate(callback);
	}

	public static onDelete(callback: (value: ThingTable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("ThingTable").onDelete(callback);
	}

	public static removeOnInsert(callback: (value: ThingTable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("ThingTable").removeOnInsert(callback);
	}

	public static removeOnUpdate(callback: (oldValue: ThingTable, newValue: ThingTable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("ThingTable").removeOnUpdate(callback);
	}

	public static removeOnDelete(callback: (value: ThingTable, reducerEvent: ReducerEvent | undefined) => void)
	{
		__SPACETIMEDB__.clientDB.getTable("ThingTable").removeOnDelete(callback);
	}

}

export default ThingTable;

__SPACETIMEDB__.registerComponent("ThingTable", ThingTable);
